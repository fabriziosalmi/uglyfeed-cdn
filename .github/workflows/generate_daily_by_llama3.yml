name: Rewrite Feeds and Deploy

on:
  schedule:
    - cron: '0 7 * * *' # Schedule to run daily at 07:00 UTC
  workflow_dispatch: # Allow manual triggering

env:
  SIMILARITY_THRESHOLD: 0.66
  MIN_SAMPLES: 2
  EPS: 0.66
  SELECTED_API: "Groq"
  GROQ_API_URL: "https://api.groq.com/openai/v1/chat/completions"
  GROQ_MODEL: "llama3-8b-8192"
  OUTPUT_FOLDER: ${{ github.workspace }}/UglyFeed/output  # Use workspace directory within UglyFeed repo
  REWRITTEN_FOLDER: ${{ github.workspace }}/UglyFeed/rewritten  # Use workspace directory within UglyFeed repo
  NLTK_DATA: ${{ github.workspace }}/UglyFeed/nltk_data  # Use workspace directory for NLTK data
  CDN_REPO: "fabriziosalmi/uglyfeed-cdn"

jobs:
  setup-and-execute:
    runs-on: ubuntu-latest
    steps:
    - name: Check out UglyFeed repository
      uses: actions/checkout@v3
      with:
        repository: fabriziosalmi/UglyFeed
        path: UglyFeed

    - name: Override config.yaml with environment variables
      run: |
        cp UglyFeed/config.yaml UglyFeed/config.yaml.bak
        yq eval '.similarity_threshold = strenv(SIMILARITY_THRESHOLD)' -i UglyFeed/config.yaml
        yq eval '.similarity_options.min_samples = strenv(MIN_SAMPLES)' -i UglyFeed/config.yaml
        yq eval '.similarity_options.eps = strenv(EPS)' -i UglyFeed/config.yaml
        yq eval '.api_config.selected_api = strenv(SELECTED_API)' -i UglyFeed/config.yaml
        yq eval '.api_config.groq_api_url = strenv(GROQ_API_URL)' -i UglyFeed/config.yaml
        yq eval '.api_config.groq_model = strenv(GROQ_MODEL)' -i UglyFeed/config.yaml
        yq eval '.folders.output_folder = strenv(OUTPUT_FOLDER)' -i UglyFeed/config.yaml
        yq eval '.folders.rewritten_folder = strenv(REWRITTEN_FOLDER)' -i UglyFeed/config.yaml
        yq eval '.github_token = strenv(GENERATOR_TOKEN)' -i UglyFeed/config.yaml
        yq eval '.github_repo = strenv(CDN_REPO)' -i UglyFeed/config.yaml
        yq eval '.enable_github = true' -i UglyFeed/config.yaml

      env:
        SIMILARITY_THRESHOLD: ${{ env.SIMILARITY_THRESHOLD }}
        MIN_SAMPLES: ${{ env.MIN_SAMPLES }}
        EPS: ${{ env.EPS }}
        SELECTED_API: ${{ env.SELECTED_API }}
        GROQ_API_URL: ${{ env.GROQ_API_URL }}
        GROQ_MODEL: ${{ env.GROQ_MODEL }}
        OUTPUT_FOLDER: ${{ env.OUTPUT_FOLDER }}
        REWRITTEN_FOLDER: ${{ env.REWRITTEN_FOLDER }}
        GENERATOR_TOKEN: ${{ secrets.GENERATOR_TOKEN }}
        CDN_REPO: ${{ env.CDN_REPO }}

    - name: Debug config.yaml
      run: |
        echo "Contents of config.yaml after overriding with variables:"
        cat UglyFeed/config.yaml

    - name: Overwrite input/feeds.txt
      run: |
        echo "https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml" > UglyFeed/input/feeds.txt
        echo "https://feeds.bbci.co.uk/news/rss.xml" >> UglyFeed/input/feeds.txt

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r UglyFeed/requirements.txt

    - name: Create NLTK Data Directory
      run: mkdir -p ${{ env.NLTK_DATA }}

    - name: Download NLTK resources
      run: |
        echo "Downloading NLTK resources to $NLTK_DATA"
        python -m nltk.downloader -d ${{ env.NLTK_DATA }} wordnet stopwords omw-1.4

    - name: Verify NLTK downloads
      run: |
        echo "Verifying NLTK downloads..."
        echo "Contents of NLTK data directory:"
        ls -la ${{ env.NLTK_DATA }}
        echo "Contents of corpora directory:"
        ls -la ${{ env.NLTK_DATA }}/corpora

    - name: Retry Download for WordNet if not found
      run: |
        if [ ! -d "${{ env.NLTK_DATA }}/corpora/wordnet" ]; then
          echo "WordNet not found. Attempting to download again..."
          python -m nltk.downloader -d ${{ env.NLTK_DATA }} wordnet
        fi

    - name: Manually unzip WordNet if still missing
      run: |
        if [ -f "${{ env.NLTK_DATA }}/corpora/wordnet.zip" ]; then
          echo "Unzipping wordnet.zip manually..."
          unzip -o ${{ env.NLTK_DATA }}/corpora/wordnet.zip -d ${{ env.NLTK_DATA }}/corpora/wordnet
        fi

    - name: Verify WordNet Download
      run: |
        echo "Contents of wordnet directory:"
        ls -la ${{ env.NLTK_DATA }}/corpora/wordnet

    - name: Download spaCy model
      run: |
        python -m spacy download it_core_news_sm

    - name: Verify spaCy setup
      run: |
        python -c "import spacy; spacy.load('it_core_news_sm')"

    - name: Run main.py
      run: |
        cd UglyFeed
        python main.py
      env:
        NLTK_DATA: ${{ env.NLTK_DATA }}
        OUTPUT_FOLDER: ${{ env.OUTPUT_FOLDER }}
        REWRITTEN_FOLDER: ${{ env.REWRITTEN_FOLDER }}

    - name: Check output directory
      run: |
        echo "Contents of the output directory after main.py execution:"
        ls -la ${{ env.OUTPUT_FOLDER }}
        if [ ! -d "${{ env.OUTPUT_FOLDER }}" ] || [ -z "$(ls -A ${{ env.OUTPUT_FOLDER }})" ]; then
          echo "Output directory is empty or does not exist. Check main.py execution."
          exit 1
        else
          echo "Output directory is present and contains files."
        fi

    - name: Inject Groq API Key into config.yaml
      run: |
        yq eval '.api_config.groq_api_key = strenv(GROQ_API_KEY)' -i UglyFeed/config.yaml
        echo "Updated config.yaml with Groq API key:"
        cat UglyFeed/config.yaml

      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

    - name: Run llm_processor.py
      run: |
        cd UglyFeed
        python llm_processor.py
      env:
        NLTK_DATA: ${{ env.NLTK_DATA }}
        OUTPUT_FOLDER: ${{ env.OUTPUT_FOLDER }}
        REWRITTEN_FOLDER: ${{ env.REWRITTEN_FOLDER }}

    - name: Check rewritten directory
      run: |
        echo "Contents of the rewritten directory after llm_processor.py execution:"
        ls -la ${{ env.REWRITTEN_FOLDER }}
        if [ ! -d "${{ env.REWRITTEN_FOLDER }}" ] || [ -z "$(ls -A ${{ env.REWRITTEN_FOLDER }})" ]; then
          echo "Rewritten directory is empty or does not exist. Check llm_processor.py execution."
          exit 1
        else
          echo "Rewritten directory is present and contains files."
        fi

    - name: Run json2rss.py
      run: |
        cd UglyFeed
        python json2rss.py
      env:
        NLTK_DATA: ${{ env.NLTK_DATA }}
        OUTPUT_FOLDER: ${{ env.OUTPUT_FOLDER }}
        REWRITTEN_FOLDER: ${{ env.REWRITTEN_FOLDER }}

    - name: Move uglyfeed.xml to feeds directory
      run: |
        mkdir -p ../uglyfeed-cdn/feeds
        mv ${{ env.OUTPUT_FOLDER }}/uglyfeed.xml ../uglyfeed-cdn/feeds/

    - name: Deploy to feeds directory
      run: |
        cd ../uglyfeed-cdn
        git config --local user.name "fabriziosalmi"
        git config --local user.email "fabrizio.salmi@gmail.com"
        git add feeds/uglyfeed.xml
        git commit -m "Deploy rewritten RSS feed: $(date +'%Y-%m-%d %H:%M:%S') - Model: ${{ env.GROQ_MODEL }}, API: ${{ env.SELECTED_API }}"
        git push https://x-access-token:${{ secrets.GENERATOR_TOKEN }}@github.com/${{ secrets.CDN_REPO }} HEAD:main

    - name: Upload artifacts for debugging (if needed)
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: UglyFeed-outputs
        path: |
          ${{ env.OUTPUT_FOLDER }}
          ${{ env.REWRITTEN_FOLDER }}
